var myMap
			
function saveTiles(tiles) 
{    
  var picLayers = new Array(2)
	picLayers[0]  = null
	picLayers[1] = null
	var myTiles = tiles;
	var innerMap = new ol.Map({		
		target: 'map',
		layers: tiles[0],
		view: new ol.View({
			center: ol.proj.transform([-77.23, 39.83], 'EPSG:4326', 'EPSG:3857'),
			zoom: 13,
			extent:  ol.proj.transformExtent([-77.14, 39.75, -77.26, 39.90],  'EPSG:4326', 'EPSG:3857'),
			maxZoom: 18.0,
			minZoom: 12.0
		})
	});
				  
	this.display = function (layer) {
		layers=innerMap.getLayers().getArray()
		var length=layers.length
		for (i=0;i<length;i++) {
			innerMap.removeLayer(layers[0])
		}
				   
        for (a=0;a<myTiles[layer].length;a++)
            innerMap.addLayer(myTiles[layer][a])
		
		for (var i = 0; i < picLayers[i]; i++) {
			if (picLayers[pLayer] != null) {
				innerMap.addLayer(picLayers[pLayers])
			}
		}		
	}
				
	this.getInnerMap = function() {
		return myMap;
	}
		
	this.changeOpacity = function(pLayer, opacity) {
		picLayers[pLayer].setOpacity(opacity)
	}	
		
    this.changePicture = function(pLayer, picNum) {
		for (var j = 0; j < picLayers.length; j++) {
			if (picLayers[j] != null) {
				innerMap.removeLayer(picLayers[j])
			}
		}

		picLayers[pLayer] = pictureLayers[picNum] 

		for (var k = 0; k < picLayers.length; k++) {
			if (picLayers[k] != null) {
				innerMap.addLayer(picLayers[k])
			}
		}
		//picLayer[pLayer].setOpacity(100)
	}
	
	return this;
}
		

function StamenMap (options) {
    label = options["label"]
	tl = new ol.layer.Tile({
		source: new ol.source.Stamen({
            layer: label
        })
    })			
	return tl;
}
						
function XYZMap(options) {
	label=options["url"]
	tl=new ol.layer.Tile({
		source: new ol.source.XYZ({
			url: label,
			opacity: true,
			zoom: options["zoom"]
		})
	})
return tl;
}
			
/*
This function reads the object parsed from JSON.  Since JSON does not
maintain the obj.constructor property, I create an instance of the 
specific object type (stored in instanceType) and copy the fields
into this new object.  This "effectively" casts the object to the correct
type.
*/
function getMapsFromJSON(string) {
	var maps = new Array()
	parsedArray = JSON.parse(string)
	var len1 = parsedArray.length
	for (var i = 0; i < len1; i++)
	{ 
		maps[i] = new Array()
		var len2 = parsedArray[i].length
		for (var j = 0; j < len2; j++)
	    {
			objType=parsedArray[i][j].instanceType
			maps[i][j] = window[objType](parsedArray[i][j])
		}
	}
return maps
}
			
function readMapFile(file)
{
    var rawFile = new XMLHttpRequest();
	rawFile.open("GET", file, true);
	rawFile.onreadystatechange = function ()
	{
		if(rawFile.readyState === 4)
		{
			if(rawFile.status === 200 || rawFile.status == 0)
			{
				var allText = rawFile.responseText;
				var tiles = getMapsFromJSON(allText)
				myMap = saveTiles(tiles)
			}
		}

	}
rawFile.send();
}
